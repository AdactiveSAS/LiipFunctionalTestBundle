# http://www.whitewashing.de/2012/02/25/symfony2_controller_testing.html

# Tests/App/config.yml
framework:
    secret:          secret
    test: ~
    router:          { resource: "%kernel.root_dir%/routing.yml" }
    form:            true
    csrf_protection: true
    templating:      { engines: ['twig'] }
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
        storage_id: session.storage.filesystem
        # https://groups.google.com/forum/#!topic/symfony2/IB-CpMgo5o0
        name: MOCKSESSID
    profiler:
        collect: false

monolog:
    handlers:
        main:
            type:         fingers_crossed
            action_level: error
            handler:      nested
        nested:
            type:  stream
            path:  %kernel.logs_dir%/%kernel.environment%.log
            level: debug

liip_functional_test:
    cache_sqlite_db: true
    query:
        max_query_count: 5
    authentication:
        username: "foobar"
        password: "12341234"

doctrine:
    dbal:
        default_connection: default
        connections:
            default:
                driver: pdo_sqlite
                path: %kernel.cache_dir%/test.db
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true            

security:
    encoders:
        # in_memory users
        Symfony\Component\Security\Core\User\User: plaintext
        # User entity
        Liip\FunctionalTestBundle\Entity\User: plaintext
    providers:
        chain_provider:
            chain:
                providers: [in_memory, main]
        in_memory:
            memory:
                users:
                    foobar:
                        password: "12341234"
                        roles: 'ROLE_USER'
                    roleadmin:
                        password: "12341234"
                        roles: 'ROLE_ADMIN'
        main:
            entity: { class: Liip\FunctionalTestBundle\Entity\User, property: id }
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
    firewalls:
        secured_area:
            pattern:  ^/
            anonymous: true
            http_basic:
                realm: "Admin Area"
            provider: chain_provider
    access_control:
        # require ROLE_ADMIN for /admin*
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
